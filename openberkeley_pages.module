<?php
/**
 * @file
 * Code for the Open Berkeley Pages feature.
 */

include_once('openberkeley_pages.features.inc');

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openberkeley_pages_form_openberkeley_landing_page_node_form_alter(&$form, &$form_state, $form_id) {
  // Streamline the form to the bare minimum.
  foreach (element_children($form) as $key) {
    switch ($key) {
      case 'title':
      case 'actions':
        // Allow it to remain as is!
        break;

      case 'path':
      case 'menu':
        // Make appear inline, without a fieldset around it.
        unset($form[$key]['#type']);
        break;

      default:
        // Hide everything else!
        if (!in_array($form[$key]['#type'], array('value', 'hidden', 'token'))) {
          $form[$key]['#access'] = FALSE;
        }
    }
  }

  // Re-order path and menu.
  $form['path']['#weight'] = 30;
  $form['menu']['#weight'] = 31;

  // Only show the path alias, if it's NOT automatically generated.
  $form['path']['alias']['#states'] = array(
    'invisible' => array(
      'input[name="path[pathauto]"]' => array('checked' => TRUE),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the Panelizer's additions to the IPE buttons to make them make sense
 * for landing pages.
 */
function openberkeley_pages_form_panels_ipe_edit_control_form_alter(&$form, &$form_state) {
  if (empty($form_state['renderer'])) {
    return;
  }
  $renderer = $form_state['renderer'];

  $cache_key = $renderer->display->cache_key;
  list($module, $type, $key) = explode(':', $cache_key, 3);
  if ($module != 'panelizer' || $type != 'node') {
    return;
  }

  // Get the actual node so that we can get it's type.
  list($nid, $view_mode) = explode(':', $key);
  if (($node = node_load($nid)) && $node->type == 'openberkeley_landing_page') {
    // Change the 'Save as custom' button back to just 'Save'.
    $form['buttons']['submit']['#value'] = t('Save');

    // Remove the 'Revert' and 'Save as default' buttons.
    unset($form['buttons']['revert_default']);
    unset($form['buttons']['save_default']);
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function openberkeley_pages_module_implements_alter(&$implementations, $hook) {
  // Move our hooks to the end so they are executed last.
  if (($hook == 'form_alter' || $hook == 'modules_enabled') && isset($implementations['openberkeley_pages'])) {
    $group = $implementations['openberkeley_pages'];
    unset($implementations['openberkeley_pages']);
    $implementations['openberkeley_pages'] = $group;
  }
}

/**
 * Implements hook_modules_enabled().
 *
 * This hook is implemented to assign some default permissions for Panelizer's
 * handling of taxonomy terms. This has to be done in this hook to run after
 * both features and defaultconfig which power the functionality. Hopefully a
 * more general solution can be found.
 * @see http://drupal.org/node/1837312
 */
function openberkeley_pages_modules_enabled($modules) {
  // Only run this logic if we are executing as part of an install profile
  // And only for this particular module.
  if (drupal_installation_attempted() && in_array('openberkeley_pages', $modules)) {

    // Rebuild some caches so this all works right.
    features_revert_module('openberkeley_pages');
    drupal_static_reset('panelizer_entity_plugin_get_handler');

    // Define some permissions for the editor role.
    $editor = user_role_load_by_name('editor');
    user_role_grant_permissions($editor->rid, array('administer panelizer node openberkeley_content_page breadcrumbs'));
    user_role_grant_permissions($editor->rid, array('administer panelizer node openberkeley_content_page content'));
    user_role_grant_permissions($editor->rid, array('administer panelizer node openberkeley_content_page context'));
    user_role_grant_permissions($editor->rid, array('administer panelizer node openberkeley_content_page defaults'));
    user_role_grant_permissions($editor->rid, array('administer panelizer node openberkeley_content_page layout'));
    user_role_grant_permissions($editor->rid, array('administer panelizer node openberkeley_content_page overview'));
    user_role_grant_permissions($editor->rid, array('administer panelizer node openberkeley_content_page settings'));

    // Define some permissions for the administrator role.
    $administrator = user_role_load_by_name('administrator');
    user_role_grant_permissions($administrator->rid, array('administer panelizer node openberkeley_content_page breadcrumbs'));
    user_role_grant_permissions($administrator->rid, array('administer panelizer node openberkeley_content_page content'));
    user_role_grant_permissions($administrator->rid, array('administer panelizer node openberkeley_content_page context'));
    user_role_grant_permissions($administrator->rid, array('administer panelizer node openberkeley_content_page defaults'));
    user_role_grant_permissions($administrator->rid, array('administer panelizer node openberkeley_content_page layout'));
    user_role_grant_permissions($administrator->rid, array('administer panelizer node openberkeley_content_page overview'));
    user_role_grant_permissions($administrator->rid, array('administer panelizer node openberkeley_content_page settings'));
  }
}
